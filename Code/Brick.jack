

class Brick {
    
    field int x;
    field int y;

    //WITH BOTTOM LEFT RIGHT LINE and FREE TOP ====== 0
    //WITH TOP LEFT RIGHT BOTTOM LINES         ====== 1
    //WITH TOP RIGHT BOTTOM LINES              ====== 2
    //WITH TOP BOTTOM LINES                    ====== 3
    //WITH LEFT RIGHT LINES                    ====== 4
    //WITH TOP RIGHT LEFT                      ====== 5
    //DIED                                     ====== 6

    field int renderType;

    constructor Brick new(int paramX, int paramY, int paramRenderType)
    {
	    let x = paramX;
  	    let y = paramY;

        let renderType = paramRenderType;

	    do render();
        
        return this;    
    }

    function int BOTTOM_LEFT_RIGHT_LINES()
    {
        return 0;
    }

    function int BOTTOM_TOP_LEFT_RIGHT_LINES()
    {
        return 1;
    }

    function int BOTTOM_TOP_RIGHT_LINES()
    {
        return 2;
    }

    function int BOTTOM_TOP_LINES()
    {
        return 3;
    }

    function int LEFT_RIGHT_LINES()
    {
        return 4;
    }

    function int TOP_LEFT_RIGHT_LINES()
    {
        return 5;
    }

    function int DIED()
    {
        return 6;
    }
 
    method void render()
    {
		var int memAddress;
        let memAddress = 16384 + (y * 32) + (x / 16);

		if(renderType = 0)
        {
	        do Memory.poke(memAddress + 0, -30703);
	        do Memory.poke(memAddress + 32, -30703);
	        do Memory.poke(memAddress + 64, -30703);
	        do Memory.poke(memAddress + 96, -30703);
	        do Memory.poke(memAddress + 128, -1);
	        do Memory.poke(memAddress + 160, -32511);
	        do Memory.poke(memAddress + 192, -32511);
	        do Memory.poke(memAddress + 224, -32511);
	        do Memory.poke(memAddress + 256, -1);
	        do Memory.poke(memAddress + 288, -30703);
	        do Memory.poke(memAddress + 320, -30703);
	        do Memory.poke(memAddress + 352, -30703);
	        do Memory.poke(memAddress + 384, -1);
	        do Memory.poke(memAddress + 416, -32511);
	        do Memory.poke(memAddress + 448, -32511);
	        do Memory.poke(memAddress + 480, -1);
        }
        else
        {
            if(renderType = 1)
            {
		            do Memory.poke(memAddress + 0, -1);
	                do Memory.poke(memAddress + 32, -30703);
	                do Memory.poke(memAddress + 64, -30703);
	                do Memory.poke(memAddress + 96, -30703);
	                do Memory.poke(memAddress + 128, -1);
	                do Memory.poke(memAddress + 160, -32511);
	                do Memory.poke(memAddress + 192, -32511);
	                do Memory.poke(memAddress + 224, -32511);
	                do Memory.poke(memAddress + 256, -1);
	                do Memory.poke(memAddress + 288, -30703);
	                do Memory.poke(memAddress + 320, -30703);
	                do Memory.poke(memAddress + 352, -30703);
	                do Memory.poke(memAddress + 384, -1);
	                do Memory.poke(memAddress + 416, -32511);
	                do Memory.poke(memAddress + 448, -32511);
	                do Memory.poke(memAddress + 480, -1);   
            }
            else
            {
                if(renderType = 2)
                {
                    do Memory.poke(memAddress + 0, -1);
	                do Memory.poke(memAddress + 32, -30704);
	                do Memory.poke(memAddress + 64, -30704);
	                do Memory.poke(memAddress + 96, -30704);
	                do Memory.poke(memAddress + 128, -1);
	                do Memory.poke(memAddress + 160, -32512);
	                do Memory.poke(memAddress + 192, -32512);
	                do Memory.poke(memAddress + 224, -32512);
	                do Memory.poke(memAddress + 256, -1);
	                do Memory.poke(memAddress + 288, -30704);
	                do Memory.poke(memAddress + 320, -30704);
	                do Memory.poke(memAddress + 352, -30704);
	                do Memory.poke(memAddress + 384, -1);
	                do Memory.poke(memAddress + 416, -32512);
	                do Memory.poke(memAddress + 448, -32512);
	                do Memory.poke(memAddress + 480, -1);
                }
                else
                {   
                    if(renderType = 3)
                    {   
                        do Memory.poke(memAddress + 0, -1);
	                    do Memory.poke(memAddress + 32, 2064);
	                    do Memory.poke(memAddress + 64, 2064);
	                    do Memory.poke(memAddress + 96, 2064);
	                    do Memory.poke(memAddress + 128, -1);
	                    do Memory.poke(memAddress + 160, 256);
	                    do Memory.poke(memAddress + 192, 256);
	                    do Memory.poke(memAddress + 224, 256);
	                    do Memory.poke(memAddress + 256, -1);
	                    do Memory.poke(memAddress + 288, 2064);
	                    do Memory.poke(memAddress + 320, 2064);
	                    do Memory.poke(memAddress + 352, 2064);
	                    do Memory.poke(memAddress + 384, -1);
	                    do Memory.poke(memAddress + 416, 256);
	                    do Memory.poke(memAddress + 448, 256);
	                    do Memory.poke(memAddress + 480, -1);
                    }
                    else
                    {
                        if(renderType = 4)
                        {
                            do Memory.poke(memAddress + 0, -30703);
	                        do Memory.poke(memAddress + 32, -30703);
	                        do Memory.poke(memAddress + 64, -30703);
	                        do Memory.poke(memAddress + 96, -30703);
	                        do Memory.poke(memAddress + 128, -1);
	                        do Memory.poke(memAddress + 160, -32511);
	                        do Memory.poke(memAddress + 192, -32511);
	                        do Memory.poke(memAddress + 224, -32511);
	                        do Memory.poke(memAddress + 256, -1);
	                        do Memory.poke(memAddress + 288, -30703);
	                        do Memory.poke(memAddress + 320, -30703);
	                        do Memory.poke(memAddress + 352, -30703);
	                        do Memory.poke(memAddress + 384, -1);
	                        do Memory.poke(memAddress + 416, -32511);
	                        do Memory.poke(memAddress + 448, -32511);
	                        do Memory.poke(memAddress + 480, -32511);
                        }
                        else
                        {
                            if(renderType = 5)
                            {
                                do Memory.poke(memAddress + 0, -1);
								do Memory.poke(memAddress + 32, -30703);
								do Memory.poke(memAddress + 64, -30703);
								do Memory.poke(memAddress + 96, -30703);
								do Memory.poke(memAddress + 128, -1);
								do Memory.poke(memAddress + 160, -32511);
								do Memory.poke(memAddress + 192, -32511);
								do Memory.poke(memAddress + 224, -32511);
								do Memory.poke(memAddress + 256, -1);
								do Memory.poke(memAddress + 288, -30703);
								do Memory.poke(memAddress + 320, -30703);
								do Memory.poke(memAddress + 352, -30703);
								do Memory.poke(memAddress + 384, -1);
								do Memory.poke(memAddress + 416, -32511);
								do Memory.poke(memAddress + 448, -32511);
								do Memory.poke(memAddress + 480, -32511);
                            }
                            else
                            {
                                if(renderType = 6)
                                {                           
                                    do Memory.poke(memAddress + 0, 0);
								    do Memory.poke(memAddress + 32, 0);
								    do Memory.poke(memAddress + 64, 0);
								    do Memory.poke(memAddress + 96, 0);
								    do Memory.poke(memAddress + 128, 0);
								    do Memory.poke(memAddress + 160, 0);
								    do Memory.poke(memAddress + 192, 0);
								    do Memory.poke(memAddress + 224, 0);
								    do Memory.poke(memAddress + 256, 0);
								    do Memory.poke(memAddress + 288, 0);
								    do Memory.poke(memAddress + 320, 0);
								    do Memory.poke(memAddress + 352, 0);
								    do Memory.poke(memAddress + 384, 0);
								    do Memory.poke(memAddress + 416, 0);
								    do Memory.poke(memAddress + 448, 0);
								    do Memory.poke(memAddress + 480, 0);
                                }                              
                            }
                        }
                    }
                }
            }
        }

		return;
    }

    method void dispose()
	{
		do Memory.deAlloc(this);
		return;
	}
    
    method int getX()
    {
	    return x;
    }

    method int getY()
    {
	    return y;
    }

    method void die()
    {
        var BattleCityGame game;
        var BoomRenderer boomRenderer;

        let renderType = Brick.DIED();
        do render();

        let game = BattleCityGame.get();
        let boomRenderer = game.getBoomRenderer();
        
        do boomRenderer.registerBoom(x, y);

        return;
    }

    method boolean collideWith(int tankX, int tankY)
    {
        return (tankX = x) & (tankY = y);
    }
}
